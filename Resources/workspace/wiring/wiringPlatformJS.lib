/*
 * Copyright (c) 2014-2015 CoNWeT Lab., Universidad Politecnica de Madrid.
 * Copyright (c) 2014-2015 by Center Open Middleware. All Rights Reserved.
 * Titanium Appcelerator 3.3.0GA
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
 
(function () {

    "use strict";

    var id = window._payload.id;
    var meta = window._payload.meta;
    var preferences = window._payload.preferences;
    var prefs_callback = null;
    var inputs = {};
    var requestCallbacks = {};
    var requestCallbacksKey = 0;
    var type = window._payload.type;

    // Platform definition
    Object.defineProperty(window, 'MashupPlatform', {value: {}});
    Object.defineProperty(window.MashupPlatform, 'activateCallback', {
        value: function activateCallback(inputName, data) {
        	inputs[inputName](data);
        }
    });
    Object.defineProperty(window.MashupPlatform, 'activateRequestCallback', {
        value: function activateRequestCallback(key, values) {
            if (values === 'Error') {
                requestCallbacks[key]["fail"](values);  
                Ti.API.info('activateRequestCallback id[key]: ' + id + '['+key+'] andResult: failed');  
            } else {
                requestCallbacks[key]["succ"](values);
                Ti.API.info('activateRequestCallback id[key]: ' + id + '['+key+'] andResult: success');  
            }
            delete requestCallbacks[key];
        }
    });
    Object.defineProperty(window.MashupPlatform, 'activatePreferenceCallback', {
        value: function activatePreferenceCallback(values) {
            prefs_callback(values);
        }
    });

    // Wiring Module
    Object.defineProperty(window.MashupPlatform, 'wiring', {value: {}});
    Object.defineProperty(window.MashupPlatform.wiring, 'registerCallback', {
        value: function registerCallback(inputName, callback) {
            inputs[inputName] = callback;
        }
    });
    Object.defineProperty(window.MashupPlatform.wiring, 'pushEvent', {
        value: function pushEvent(outputName, data, options) {
            Ti.App.fireEvent('pushEvent', {
                'id': id,
                'name': outputName,
                'dataEvent': data
            });
        }
    });
    Object.preventExtensions(window.MashupPlatform.wiring);

    // HTTP Module
    Object.defineProperty(window.MashupPlatform, 'http', {value: {}});
    Object.defineProperty(window.MashupPlatform.http, 'makeRequest', {
        value: function makeRequest(url, options) {
            requestCallbacks[requestCallbacksKey] = {
                succ: options["onSuccess"],
                fail: options["onFailure"]
            };
            Ti.App.fireEvent('makeRequest', {
                'id': id,
                'idRequest': requestCallbacksKey,
                'typeView':type,
                'url': url,
                'options': options
            });
            requestCallbacksKey = requestCallbacksKey + 1;
      	}
    });
    Object.preventExtensions(window.MashupPlatform.http);
   
    // Preferences Module
    Object.defineProperty(window.MashupPlatform, 'prefs', {value: {}});
    Object.defineProperty(window.MashupPlatform.prefs, 'PreferenceError', {
        value: function PreferenceError(message) {
            this.name = "PreferenceError";
            this.message = message || "";
        }
    });
    MashupPlatform.prefs.PreferenceError.prototype = new Error();
    MashupPlatform.prefs.PreferenceError.prototype.constructor = MashupPlatform.prefs.PreferenceError;
    Object.freeze(MashupPlatform.prefs.PreferenceError.prototype);
    Object.freeze(MashupPlatform.prefs.PreferenceError);

    Object.defineProperty(window.MashupPlatform.prefs, 'get', {
        value: function get(key) {
            if (key in meta.preferences) {
                if (preferences[key] == null) {
                    preferences[key] = {
                        readonly: false,
                        hidden: false,
                        value: null
                    };
                }
                if (preferences[key].value == null) {
                    preferences[key].value = meta.preferences[key].default;
                }
                return preferences[key].value;
            } else {
                throw new MashupPlatform.prefs.PreferenceError('"' + key + '" is not a valid preference name');
            }
        }
    });
    Object.defineProperty(window.MashupPlatform.prefs, 'set', {
        value: function set(key, value) {
            if (key in meta.preferences) {
                if (preferences[key] == null) {
                    preferences[key] = {
                        readonly: false,
                        hidden: false,
                        value: null
                    };
                }
                preferences.value = value;
                // TODO persist
            } else {
                throw new MashupPlatform.prefs.PreferenceError('"' + key + '" is not a valid preference name');
            }
        }
    });
    Object.defineProperty(window.MashupPlatform.prefs, 'registerCallback', {
        value: function registerCallback(callback) {
            prefs_callback = callback;
        }
    });
    Object.preventExtensions(window.MashupPlatform.prefs);

})();
