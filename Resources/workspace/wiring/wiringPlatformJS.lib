/*
 * Copyright (c) 2014-2015 CoNWeT Lab., Universidad Politecnica de Madrid.
 * Copyright (c) 2014-2015 by Center Open Middleware. All Rights Reserved.
 * Titanium Appcelerator 3.3.0GA
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
 
(function () {

    "use strict";

    var id = window._payload.id;
    var meta = window._payload.meta;
    var preferences = window._payload.preferences;
    var properties = window._payload.properties;
    var prefs_callback = null;
    var inputs = {};
    var requestCallbacks = {};
    var requestCallbacksKey = 0;
    var type = window._payload.type;
    var component_entry = null;

    // Platform definition
    Object.defineProperty(window, 'MashupPlatform', {value: {}});
    Object.defineProperty(window.MashupPlatform, 'activateCallback', {
        value: function activateCallback(inputName, data) {
        	inputs[inputName](data);
        }
    });
    Object.defineProperty(window.MashupPlatform, 'activateRequestCallback', {
        value: function activateRequestCallback(key, values) {
            if (values === 'Error') {
                requestCallbacks[key].fail(values);
                Ti.API.info('activateRequestCallback id[key]: ' + id + '[' + key + '] andResult: failed');
            } else {
                requestCallbacks[key].succ(values);
                Ti.API.info('activateRequestCallback id[key]: ' + id + '[' + key + '] andResult: success');
            }
            delete requestCallbacks[key];
        }
    });
    Object.defineProperty(window.MashupPlatform, 'activatePreferenceCallback', {
        value: function activatePreferenceCallback(values) {
            prefs_callback(values);
        }
    });

    // Component
    Object.defineProperty(window.MashupPlatform, type, {value: {}});
    component_entry = window.MashupPlatform[type];
    Object.defineProperty(component_entry, 'id', {value: id});
    if (type === 'widget') {
        var IWidgetVariable = function IWidgetVariable(meta, variable) {
            this.set = function set(value) {
                if (!variable.readonly) {
                    variable.value = value;
                } else {
                    // Throw exception
                }
            };

            this.get = function get() {
                return variable.value;
            };

            Object.freeze(this);
        };

        Object.defineProperty(component_entry, 'getVariable', {
            value: function getVariable(key) {
                var variable;
                if (key in meta.properties) {
                    if (properties[key] != null && properties[key].value != null) {
                        variable = properties[key];
                    } else {
                        variable = {
                            name: key,
                            readonly: false,
                            value: meta.properties.default
                        };
                    }
                    return new IWidgetVariable(meta.properties[key], variable);
                } else {
                    // Throw new Error
                }
            }
        });
    }

    // Mashup
    Object.defineProperty(window.MashupPlatform, 'mashup', {value: {}});

    // Context
    var ContextManager = function ContextManager(values) {

        var callbacks = [];

        this.getAvailableContext = function getAvailableContext() {
            return [];
        };

        this.get = function get(key) {
            return values[key];
        };

        this.registerCallback = function registerCallback(callback) {
            callbacks.push(callback);
        };
    };
    Object.defineProperty(window.MashupPlatform, 'context', {value: new ContextManager()});
    Object.defineProperty(component_entry, 'context', {value: new ContextManager(window._payload.mac_context)});
    Object.defineProperty(window.MashupPlatform.mashup, 'context', {value: new ContextManager()});

    // Wiring Module
    Object.defineProperty(window.MashupPlatform, 'wiring', {value: {}});
    Object.defineProperty(window.MashupPlatform.wiring, 'registerCallback', {
        value: function registerCallback(inputName, callback) {
            inputs[inputName] = callback;
        }
    });
    Object.defineProperty(window.MashupPlatform.wiring, 'pushEvent', {
        value: function pushEvent(outputName, data, options) {
            Ti.App.fireEvent('pushEvent', {
                'id': id,
                'name': outputName,
                'dataEvent': data
            });
        }
    });
    Object.preventExtensions(window.MashupPlatform.wiring);

    // HTTP Module
    Object.defineProperty(window.MashupPlatform, 'http', {value: {}});
    Object.defineProperty(window.MashupPlatform.http, 'makeRequest', {
        value: function makeRequest(url, options) {
            requestCallbacks[requestCallbacksKey] = {
                succ: options.onSuccess,
                fail: options.onFailure
            };
            Ti.App.fireEvent('makeRequest', {
                'id': id,
                'idRequest': requestCallbacksKey,
                'typeView':type,
                'url': url,
                'options': options
            });
            requestCallbacksKey = requestCallbacksKey + 1;
      	}
    });
    Object.preventExtensions(window.MashupPlatform.http);
   
    // Preferences Module
    Object.defineProperty(window.MashupPlatform, 'prefs', {value: {}});
    Object.defineProperty(window.MashupPlatform.prefs, 'PreferenceError', {
        value: function PreferenceError(message) {
            this.name = "PreferenceError";
            this.message = message || "";
        }
    });
    MashupPlatform.prefs.PreferenceError.prototype = new Error();
    MashupPlatform.prefs.PreferenceError.prototype.constructor = MashupPlatform.prefs.PreferenceError;
    Object.freeze(MashupPlatform.prefs.PreferenceError.prototype);
    Object.freeze(MashupPlatform.prefs.PreferenceError);

    Object.defineProperty(window.MashupPlatform.prefs, 'get', {
        value: function get(key) {
            if (key in meta.preferences) {
                if (preferences[key] == null) {
                    preferences[key] = {
                        readonly: false,
                        hidden: false,
                        value: null
                    };
                }
                if (preferences[key].value == null) {
                    preferences[key].value = meta.preferences[key].default;
                }
                return preferences[key].value;
            } else {
                throw new MashupPlatform.prefs.PreferenceError('"' + key + '" is not a valid preference name');
            }
        }
    });
    Object.defineProperty(window.MashupPlatform.prefs, 'set', {
        value: function set(key, value) {
            if (key in meta.preferences) {
                if (preferences[key] == null) {
                    preferences[key] = {
                        readonly: false,
                        hidden: false,
                        value: null
                    };
                }
                preferences.value = value;
                // TODO persist
            } else {
                throw new MashupPlatform.prefs.PreferenceError('"' + key + '" is not a valid preference name');
            }
        }
    });
    Object.defineProperty(window.MashupPlatform.prefs, 'registerCallback', {
        value: function registerCallback(callback) {
            prefs_callback = callback;
        }
    });
    Object.preventExtensions(window.MashupPlatform.prefs);

})();
